观察者模式
    又叫发布-订阅模式，适用场景为1对多，多个对象依赖于一个对象，当一的一方改变时逐个通知多的一方，无需多的一方一直去询问是否改变。
    步骤：
        1.有一个发布者subject和一个订阅者observer接口，发布者接口中包含增加订阅者、移除订阅者、通知订阅者方法，订阅者包含接受通知方法。
        2.发布者的实现类只有一个
        3.订阅者的实现类有多个
        4.发布者的属性改变，就调用通知方法通知订阅者

推模式：
    发布者推送给订阅者的是一个固定对象，降低了发布者和订阅者的耦合性
    步骤：
        1.有一个发布者subject和一个订阅者observer接口，发布者接口中包含增加订阅者、移除订阅者、通知订阅者方法，订阅者包含接受通知方法。
        2.发布者的实现类只有一个
        3.订阅者的实现类有多个
        4.发布者的对象属性改变，就调用通知方法通知订阅者，把存储相应数据的对象发布出去


拉模式：
    发布者推送给订阅者的是发布者自己，订阅者需要什么属性就在发布者对象中自己拉取。
    步骤：
        1.有一个发布者subject和一个订阅者observer接口，发布者接口中包含增加订阅者、移除订阅者、通知订阅者方法，订阅者包含接受通知方法。
        2.发布者的实现类只有一个
        3.订阅者的实现类有多个
        4.发布者的对象属性改变，就调用通知方法通知订阅者，把存储相应数据的对象发布出去

jdk观察者模式：
    jdk自己实现了subject观察者Observable,和订阅者observer——Observer，同时实现了拉模式和推模式。
    步骤：
        1.发布者继承Observable,属性改变就调用setChanges();和notifyObservers();方法
        2.订阅者实现Observe接口
        3.发布者调用addObserver(订阅者);方法


